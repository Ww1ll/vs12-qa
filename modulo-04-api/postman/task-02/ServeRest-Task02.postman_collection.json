{
	"info": {
		"_postman_id": "5ebfcd2e-b654-4af4-9574-6342acdaa88c",
		"name": "ServeRest-Task02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25744873"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "CT001-Cadastrar Produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"const buscaProduto = {\r",
									"      url: pm.environment.get(\"base_url\") + \"/produtos/\" + produto._id,\r",
									"    method: \"GET\"\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Validar cadastro de produto com sucesso\", () => {\r",
									"pm.sendRequest(buscaProduto,  function(err, res){\r",
									"        pm.expect(err).is.null;\r",
									"        produto = res.json();\r",
									"\r",
									"        pm.expect(pm.environment.get(\"nome\")).to.eq(produto.nome);\r",
									"        pm.expect(pm.environment.get(\"preco\")).to.eq(produto.preco);\r",
									"        pm.expect(pm.environment.get(\"descricao\")).to.eq(produto.descricao);\r",
									"        pm.expect(pm.environment.get(\"quantidade\")).to.eq(produto.quantidade);  \r",
									"    });  \r",
									"})\r",
									"\r",
									"pm.test(\"Excluir massa de teste com sucesso\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + produto._id,\r",
									"        method: \"DELETE\",\r",
									"        header: {\r",
									"            \"Authorization\": pm.environment.get(\"token\")\r",
									"        }\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"preco\":  {{preco}},\r\n  \"descricao\":  \"{{descricao}}\",\r\n  \"quantidade\":  {{quantidade}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Produtos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT002-Cadastrar Produto Inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\":  {{preco}},\r\n  \"descricao\":  \"{{descricao}}\",\r\n  \"quantidade\":  {{quantidade}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Produtos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT003-Cadastrar Produto Inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const produtoRepetido = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/produtos/\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        \"Content-Type\" : \"application/json\",\r",
									"        \"Authorization\": pm.environment.get(\"token\")\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\" : pm.environment.get(\"nome\"),\r",
									"            \"preco\" : pm.environment.get(\"preco\"),\r",
									"            \"descricao\" : pm.environment.get(\"descricao\"),\r",
									"            \"quantidade\" : pm.environment.get(\"quantidade\")\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(produtoRepetido, function(err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.environment.set(\"idProduto\", res.json()._id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Excluir massa de teste com sucesso\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"idProduto\"),\r",
									"        method: \"DELETE\",\r",
									"        header: {\r",
									"            \"Authorization\": pm.environment.get(\"token\")\r",
									"        }\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"preco\":  {{preco}},\r\n  \"descricao\":  \"{{descricao}}\",\r\n  \"quantidade\":  {{quantidade}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Produtos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "CT001-Listar Produtos por ID com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const novoProduto = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        \"Content-Type\" : \"application/json\",\r",
									"        \"Authorization\": pm.environment.get(\"token\")\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\" : pm.environment.get(\"nome\"),\r",
									"            \"preco\" : pm.environment.get(\"preco\"),\r",
									"            \"descricao\" : pm.environment.get(\"descricao\"),\r",
									"            \"quantidade\" : pm.environment.get(\"quantidade\")\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(novoProduto, function(err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.environment.set(\"id_Produto\", res.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"\r",
									"const buscaProduto = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/produtos/\" + produto._id,\r",
									"    method: \"GET\"\r",
									"}\r",
									"\r",
									"pm.test(\"Validar busca por ID\", () => {\r",
									"pm.sendRequest(buscaProduto,  function(err, res){\r",
									"        pm.expect(err).is.null;\r",
									"        produto = res.json();\r",
									"\r",
									"        pm.expect(pm.response.json()._id).to.eq(produto._id);  \r",
									"    });  \r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Excluir massa de teste com sucesso\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"id_Produto\"),\r",
									"        method: \"DELETE\",\r",
									"        header: {\r",
									"            \"Authorization\": pm.environment.get(\"token\")\r",
									"        }\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/Produtos/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id_Produto}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT002-Listar Produtos por ID não válido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/Produtos/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "ID_invalido"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT003-Listar Produtos por ID vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ServeRest}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/Produtos/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"Produtos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const nomes = [\"Playstation 5\", \"Joystick Xbox\", \"Xbox Series X\", \"Joystick PS5\", \"Videocassete\", \"Dvd Player\", \"Memoria Ram\", \"Placa de video\", \"Fone JBL\", \"Fone sem fio JBL\", \"Mouse HP\", \"Webcam 4k\", \"Monitor 24' AOC\", \"Iphone 15\", \"Nintendo Switch\", \"Mouse Razer\"];",
					"",
					"",
					"//const precos = [4999.99, 399.99, 5999.99, 158.99, 26.99, 54.99, 39.99, 499.99, 9802.90, 99.80, 35.99, 1452.99, 569.99, 2578.99, 2594.99, 254.99, 899.99];",
					"",
					"",
					"const descricoes = [\"Gamer\", \"Gamer\", \"Gamer\", \"Periferico\", \"Periférico\", \"Gamer\", \"Periférico\", \"Gamer\", \"Doméstico\", \"Doméstico\", \"Hardware\", \"Hardware\", \"Gamer\", \"Periferico\", \"Smartphone\", \"Periferico\", \"Periferico\"];",
					"",
					"",
					"//const quantidades = [5, 405, 6, 874, 65, 256, 100, 23, 44, 77, 33, 25, 789, 985, 25, 254, 20]",
					"",
					"",
					"pm.environment.set(\"nome\", nomes[_.random(nomes.length - 1)]);",
					"",
					"pm.environment.set(\"preco\", _.random(100, 10000));",
					"",
					"pm.environment.set(\"descricao\", descricoes[_.random(descricoes.length - 1)]);",
					"",
					"pm.environment.set(\"quantidade\", _.random(1, 200));",
					"",
					"",
					"const produto = {",
					"    \"nome\" : pm.environment.get(\"nome\"),",
					"    \"preco\": pm.environment.get(\"preco\"),",
					"    \"descricao\" : pm.environment.get(\"descricao\"),",
					"    \"quantidade\": pm.environment.get(\"quantidade\")",
					"}",
					"pm.environment.set(\"novoProduto\", produto);",
					"",
					"const login = {",
					"    url: pm.environment.get(\"base_url\") + \"/login\",",
					"    method: 'POST',",
					"    header: {",
					"        \"Content-Type\" : \"application/json\"",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            \"email\" : pm.environment.get(\"email\"),",
					"            \"password\" : pm.environment.get(\"password\")",
					"        })",
					"    }",
					"};",
					"pm.sendRequest(login, function(err, res) {",
					"    pm.expect(err).is.null;",
					"    pm.environment.set(\"token\", res.json().authorization);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}